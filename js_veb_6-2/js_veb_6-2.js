// Видео - 0:21:29...1:24:00
//! Пример использования метода "querySelector()":
console.log('Примеры использования метода "querySelector()":');
console.log('------------------------------------------------');

// - для обращения к элементу HTML документа по CSS классу. Обрати внимание на запись имени класса с - "."
const textEl = document.querySelector('.text');
console.log('- "textEl" =>', textEl);
console.log('------------------------------------------------');

// - для обращения к элементу HTML документа по тегу. Обрати внимание на то, что имя тега пишется без - "."
const spanEl = document.querySelector('span');
console.log('- "spanEl" =>', spanEl);
console.log('------------------------------------------------');

// - для обращения к элементу HTML документа, через соседний с ним элемент. Обрати внимание на то, что мы пишем сначало имя тега, рядом с которым находится искомый элемент (без - "."), а после имя класса (с - ".") через "+".
const textEl_2 = document.querySelector('span + .text');
//! В этой записи - "span + .text" используется правила CSS комбинатора селекторов, который, в данном случае, указывает на то, что нужно выбрать первый тег с классом ".text", который идет после тега - <span>.
// Задаем "инлайновый" параметр "бекграунда" абзацу - "textEl_2".
textEl_2.style.backgroundColor = 'red';
console.log('- "textEl_2" =>', textEl_2);
console.log('************************************************');


//!=============================================================


//! Пример использования метода "getElementsByClassName()":
console.log('Примеры использования метода "getElementsByClassName()":');
console.log('------------------------------------------------');

// - для обращения к первому элементу HTML документа с соответствующим CSS селектором. Данный метод применяется ТОЛЬКО для выдиления группы элементов с одинаковым CSS селектором.
const textEl_3 = document.getElementsByClassName('text');
console.log('- "textEl_3" =>', textEl_3);
console.log('------------------------------------------------');

// - для обращения к конкретному элементу HTML документа, который вошел в группу предварительно выделенных по CSS селектору элементов для изменения свойств, одного из них. Например, задаем "инлайн" стиль 3-у элементу из коллекции.
textEl_3[2].style.backgroundColor = 'blue';
console.log('- "textEl_3[2]" =>', textEl_3[2]);
console.log('************************************************');


//!=============================================================


//! Пример использования метода "getElementsByTagName()" для выбора группы элементов по имени тега:
console.log('Примеры использования метода "getElementsByTagName()":');
console.log('------------------------------------------------');

// - для создания псевдо-массива соответствующих элементов, с "прямым" использованием метода - "getElementsByTagName()".
const buttonsEl = document.getElementsByTagName('button');
console.log('- "buttonsEl" =>', buttonsEl);
console.log('------------------------------------------------');

// - для создания массива соответствующих элементов, с использованием метода - "getElementsByTagName()" и деструкторизации.  
const buttonsEl_2 = [...document.getElementsByTagName('button')];
console.log('- "buttonsEl_2" =>', buttonsEl_2)
console.log('************************************************');


//!=============================================================


//! Пример использования атрибута "data-set" для изменения свойств элементов HTML документа.
console.log('Пример использования атрибутов "data-...":');
console.log('------------------------------------------------');

//! "data-set" - это отдельный атрибут тега, который предназначен для передачи информации.

// В структуре HTML документа есть два тега-<button> у которых присутствует атрибут - "data-active" с разными значениями. Свойство "data-set" позволяет обратится к любому атрибуту тега "data-...", и выяснить имя его второй части, а так же значение этого атрибута.
// Обращаемся к первому тегу-<button>, выясняя значение второй части его имени
console.log(buttonsEl_2[0].dataset);
console.log('------------------------------------------------');
// Обращаемся ко второму тегу-<button>, выясняя значение второй части его имени
console.log(buttonsEl_2[1].dataset);
console.log('------------------------------------------------');
//! Как мы видем в консоле, при вышеописанном обращении выходит значение в виде объекта, в котором имя свойства "active" - это вторая часть атрибута "data-...", а значение этого свойства - это значее атрибута - "data-active", указанное в нем. Важной особенностью значений таких атрибутов - они всегда имеют формат данных - "string", т.е., вне зависимости от содержимого, значение подобных атрибутов - "всегда строка".

// Создаем функцию для изменения свойств тега-<button>, в зависимости от значения его атрибута "data-active".
buttonsEl_2.forEach(el => {
    // Выводим в лог значения атрибута "data-active" каждого перебираемого элемента массива
    console.dir(el.dataset.active);
    // Создаем промежуточную переменную и присваиваем ей значение атрибута "data-active" каждого перебираемого элемента массива
    const status = el.dataset.active;

    // Используя ветвление, изменяем свойство "бекграунда" тегов-<button>, в зависимости от значения их атрибутов - "data-active".
    if (status === 'true') {
        el.style.backgroundColor = 'green';
    } else {
        el.style.backgroundColor = 'yellow';
    };
});
console.log('************************************************');


//!=============================================================

//! Пример использования метода "getElementsById()":
console.log('Примеры использования метода "getElementsById()":');
console.log('------------------------------------------------');

// - для обращения к элементу HTML документа по селектору "id". Обрати внимание на то, что имя селектора пишется БЕЗ символа "#".
const showCT = document.getElementById('showCT');
console.log('- "showCT" =>', showCT);
console.log('************************************************');


//!=============================================================


//! Пример использования объекта-события - "event":


// Вешаем слушателя на тег-<button> - "showCT", по событию 'click'
showCT.addEventListener('click', event => {
    console.log('Примеры использования объекта-события - "event":');
    console.log('--------------------------------------------');
    // Выводим в лог текущий объект-событие
    console.log('"event" =>', event);
    console.log('--------------------------------------------');
    // Выводим в лог элемент на котором произошло событие
    console.log('"event.target" =>', event.target);
    console.log('--------------------------------------------');
    // Выводим в лог элемент на котором висит слушатель
    console.log('"event.currentTarget" =>', event.currentTarget);
    console.log('********************************************');
});
//! Вывод информации в консоль произойдет только после "нажатия" на соответствующую клавишу в окне браузера.



//!=============================================================

// Видео - 0:59:00...
//! Разбираем пример из конспекта (Модуль 6 - Занятие 12 - События элементов форм)

const form = document.querySelector(".form");

form.addEventListener("submit", handleSubmit);

function handleSubmit(event) {
    event.preventDefault();
    

    console.dir(event.currentTarget);
    console.dir(event.currentTarget.elements);
    console.dir(event.currentTarget.elements.login.value);
    console.dir(event.currentTarget.elements.password.value);

  const {
    elements: { login, password }
  } = event.currentTarget;

  if (login.value === "" || password.value === "") {
    return console.log("Please fill in all the fields!");
  }

  console.log(`Login: ${login.value}, Password: ${password.value}`);
  event.currentTarget.reset();
}

// Метод "reset()" - чистит "инпут".

//!=============================================================


