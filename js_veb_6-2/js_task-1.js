// Видео - 1:34:00

//! Условия задачи:
// 1. Создать модальное окно, которое будет открываться при клике на кнопке, находящейся внутри тега-<body>. Модальное окно должно закрываться при клике на полупрозрачны оверлей, и на соответствующую кнопку, расположенную внутри "модалки".
// 2. Добавить в "модалку" логику закрытия - при нажатии на клавишу "Escape".

//! 3-й ункт задачи - НЕ выполнен! 
// 3. Создать форму регистрации пользователя с помощью JS, в которой должно быть 2-а поля и следующий набор свойств в них:
    // - поле для ввода логина;
    // - поле для ввода пароля;
    // - необходимо "захаркордити" правильные логин и пароль в константы;
    // - необходимо добавить логику "сабмита" формы, при котором должна быть выполнена проверка правильности введенных в соответствующие поля логина и пароля:
        // - если логин и пароль совпадают (со значениями находящимеся в соответствующих переменных) - удаляем форму из документа и отображаем на странице тег-<h2> с текстом "Вход успешный";
        // - если логин и пароль не совпадают (со значениями находящимеся в соответствующих переменных) - выводим под формой текстовое сообщение об ошибке - "Логин или Пароль введены не правильно!", отображенное красным цветом.


//!=============================================================


//! Подготовительные действия:
// - подключаем к HTML документу отдельный CSS файл и выполняем предварительную настройку стилей страницы и тега-<body>;
// - внутри тега-<body> создаем тег-<button>, задаем ему CSS класс и стилизируем его, а так же задаем ему "id" для его последующей "привязки" в JS коде;
// - внутри тега-<body> создаем необходимую разметку модального окна, задаем этим элементам атрибуты CSS класса, выполняем их предварительную стилизацию, и некоторым элементам (тегам: модалки, кнопки закрытия) - задаем "id" для их "привязки" в JS коде;
// - внутри тега-<body> создаем дополнительный тег-<div> для "оверлея", задаем ему атрибуты CSS класса и "id", выполняем предварительную стилизацию;
// - создаем CSS провила, в условиях которого указываем наличие класса ".open" у тега боди, при наличии которого становится видимым "оверлей" и "модалка". 


//!=============================================================


//! Решение задачи:

// 1. Создаем переменную-ссылку на существующий в HTML документе тег-<button>, предназначенный для открытия модального окна, по "id".
const openModalBtn = document.getElementById('OpenModalBtn');
// Проверяем, выводя в лог ссылку, корректность "приязки" существующего тега-<button> к созданной переменной "openModalBtn".
console.log('"openModalBtn" =>', openModalBtn);
console.log('-----------------------------------------------');

// 2. Создаем переменную-ссылку на существующий в HTML документе тег-<div> по "id", являющейся "оверлеем".
const overlay = document.getElementById('overlay');
// Проверяем, выводя в лог ссылку, корректность "приязки" существующего тега-<div> к созданной переменной "overlay".
console.log('"overlay" =>', overlay);
console.log('-----------------------------------------------');

// 3. Создаем переменную-ссылку на существующий в HTML документе тег-<button> по "id", находящийся в разметки модального окна и предназначенный для закрытия модального окна.
const closeBtn = document.getElementById('closeBtn');
// Проверяем, выводя в лог ссылку, корректность "приязки" существующего тега-<button> к созданной переменной "closeBtn".
console.log('"closeBtn" =>', closeBtn);
console.log('-----------------------------------------------');

// 4. Создаем переменную-ссылку на CSS класс "open", при установки которого в тег-<body> - включается отображение "оверлея" и "модалки", согласно установленых в CSS стилях правил.
const openClass = 'open';

// 5. "Вешаем" слушателя событий на тег-<button> (кнопку вызова "модалки"), по событию - 'click', и задаем имя для "колл-бек" функции - "handleModalOpen", которая должна выполнятся при регистрации соответствующего события, и вызывать модальное окно.
openModalBtn.addEventListener('click', handleModalOpen);

// 6. Пишем код "колл-бек" функции "handleModalOpen".
function handleModalOpen() {
    // Создаем текстовый вывод в лог для проверки срабатывания функции, при регистрации браузером события - 'click'.
    // console.log('Функция "handleModalOpen" - сработала!');

    // Создаем правило, по которому на тег-<body> будет устанавливаться вспомогательный класс "open" (константа "openClass"), при активации функции
    document.body.classList.add(openClass);
}

// 7. "Вешаем" слушателя событий на тег-<div> ("оверлей"), по событию - 'click', и задаем имя для "колл-бек" функции - "handleModalClose", которая должна выполнятся при регистрации соответствующего события, и закрывать модальное окно.
overlay.addEventListener('click', handleModalClose);

// 8. "Вешаем" слушателя событий на тег-<button> (нопку закрытия "модалки", находящуюся в разметке модального окна), по событию - 'click', и задаем имя для "колл-бек" функции - "handleModalClose", которая должна выполнятся при регистрации соответствующего события, и закрывать модальное окно.
closeBtn.addEventListener('click', handleModalClose);

// 9.
function handleModalClose() {
    // Создаем текстовый вывод в лог для проверки срабатывания функции, при регистрации браузером события - 'click'.
    // console.log('Функция "handleModalClose" - сработала!');

    // Создаем правило, по которому c тега-<body> будет удаляться вспомогательный класс "open" (константа "openClass"), при активации функции
    document.body.classList.remove(openClass);
}

// 10. "Вешаем" слушателя события - 'keydown' на HTML документ для регистрации - "нажатия" клавиш на клавиатуре, и задаем имя для "колл-бек" функции - "handleModalCloseOnESC", которая должна выполнятся при регистрации соответствующего события, и закрывать модальное окно. 
document.body.addEventListener('keydown', handleModalCloseOnESC);

// 11. Пишем код "колл-бек" функции "handleModalCloseOnESC".
function handleModalCloseOnESC(event) {
    // Создаем проверку, при которой отслеживается нажатие клавиши "Escape".
    if (event.code === 'Escape') handleModalClose();
}

// Видео - 1:49:50