// Видео - 0:27:32

//! Пример 2-х методов "привязки" элементов HTML документа:
// Этот метод "привязки" элементов рекомендуется использовать для работы с селекторами CSS класса
// const list = document.querySelector('#list');

// Этот метод "привязки" элементов рекомендуется использовать для работы с селекторами ID
const list = document.getElementById('list');

// Выводим в лог ссылку на тег-список
console.log(list);
console.log('-----------------------------------------------');
// Выводим в лог объект-элемента тега-списка
console.dir(list);
console.log('-----------------------------------------------');
// Выводим в лог псевдо-массив объектов-"детей" тега-списка
console.log(list.children);
console.log('***********************************************');


//! Отдельно следует отметить про существование метода "getElementsByClassName", который работает по томуже принцыпу, что и метод "getElementById", только в скобки нужно вводить имя соответствующего CSS класса.


//! Пример обращения к НЕ существующим элементам HTML документа
// Выполняем "привязку" НЕ существующего элемента по ID
const list_1 = document.getElementById('list-1');

// Выводим в лог ссылку на НЕ существующий элемент
console.log(list_1);
console.log('-----------------------------------------------');
// Выводим в лог НЕ существующий объект-элемента
console.dir(list_1);
console.log('***********************************************');
// Выводим в лог псевдо-массив объектов-"детей" НЕ существующего элемента
// console.log(list_1.children);
// Раскомментируй и увидешь ошибку в консоли.


//! Важной особенностью работы с кодом является необходимость проведения проверок на наличее "привязываемого" элемента, т.к. в случае его отсутствия - код "поламается".
// Пример проведения простейшей проверки на корректность "привязки" элемента HTML документа
if (list_1) {
    console.log(list_1.children);
} else {
    console.log(`This element - doesn't exist!`)
};
console.log('***********************************************');


//!============================================================


// Метод "createElement" считается менее ресурсоемким чем метод "insertHTML", поэтому для создания новых элементов в существующей структуре HTML документа - предпочтительнее всего использовать - "createElement", который в меньшей степени "нагружает" DOM.


//!============================================================


