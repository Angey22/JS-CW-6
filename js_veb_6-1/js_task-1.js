// Условия задачи:
//! Необходимо создать список технологий в HTML документе (т.е., создать набор HTML элементов, состоящих из тега - <ul> и группы тегов <li> в нем, с текстовыми значениями в виде названия технологий), которые изучают на курсе "FullStack", с помощью JS. Показать как это делается с помощью методов "map" и "reduce", используя для этого исходный массив - "technologies".

// Исходный массив с названиями технологий.
const technologies = ['HTML', 'CSS', 'JavaScript', 'React', 'Node'];

/*
* Алгоритм решение задачи:
* 1. Создать основу-контейнер для списка - "тег-<ul>";
* 2. Создать цыкл для перебора элементов исходного массива
* 3. Создать "тег-<li>";
* 4. Записать текст из соответствующего элемента массива в "тег-<li>";
* 5. Сгрупировать все созданные элементы, разместив "теги-<li>" внутри "тега-<ul>";
* 6. Вставить созданную группу элементов в HTML документ
*/

//! Решение задачи:
// 1-е создаем "тег-<ul>".
const listEl = document.createElement('ul');


// 2-е, создаем цыкл для перебора элементов исходного массива:

// 1-й вариант решения задачи, с помощью цыкла "for...of"
// for (const technology of technologies) {
//     // 3-е, создаем "тег-<li>"
//     const liEl = document.createElement('li');
//     // 4-е, записываем в созданный "тег-<li>" текст
//     liEl.textContent = technology;
//     // 5-е, связываем все созданные элементы воедино, размещая "теги-<li>" внутри "тега-<ul>"
//     listEl.append(liEl);
//     // C тем же результатом, можно использовать метод "appendChild()".
// };
//! Важно обратить внимание на то, что для браузера, легче всего обрабатывать именно 1-й вариант кода, позволяющий решить нашу задачу, т.к. в нем нет сложных функций. + Используются стандартные "олдскульные" методы, которые наверняка поддерживаются всеми версиями существующих браузеров.


// 2-й вариант решения задачи, с помощью метода "map":
// Создаем переменную-массив, с набор тегов <li>, созданных с использованием шаблонной строки (используя метод "map"). После чего, преобразовываем массив в строку (с помощью метода "join"). Выполнив фактически 2-й, 3-й и 4-й пункты нашего алгоритма решения задачи.
// const listContent = technologies.map(technology => `<li>${technology}</li>`).join('');
// // Выводим в лог значение переменной "listContent"
// console.log('"listContent" =>', listContent);

// // 5-е, связываем все созданные элементы воедино, размещая "теги-<li>" внутри "тега-<ul>". Используя для этого метод "insertAdjacentHTML()", т.к. именно этот метод позволяет преобразовать строку в тег.
// listEl.insertAdjacentHTML('beforeend', listContent);
// // Такой же эффект можно получить используя функцию "innerHTML":
// // listEl.innerHTML = listContent;
//! Нельзя забывать про особенность работы метода "innerHTML", который полностью перезаписывает соответствующий тег, и в следствии чего - потребляет большее количество ресурсов браузера, необходимых для выполнения задачи.


// 3-й вариант решения задачи, с помощью метода "reduce":
// Создаем переменную-строку, с набор тегов <li>, созданных с использованием шаблонной строки (используя метод "reduce". Фактически, мы выполнили 2-й, 3-й и 4-й пункты нашего алгоритма решения задачи. При этом, по сравнению с предыдущим вариантом решения (2-м), мы использовали только метод "reduce" для создания строки, и нам не нужно было дополнительно применять - метод "join".
// const listContent_2 = technologies.reduce((acc, technology) => (acc += `<li>${technology}</li>`), "");
// // Выводим в лог значение переменной "listContent_2"
// console.log('"listContent_2" =>', listContent_2);

// // 5-е, связываем все созданные элементы воедино, размещая "теги-<li>" внутри "тега-<ul>". Используя для этого метод "insertAdjacentHTML()", т.к. именно этот метод позволяет преобразовать строку в тег.
// listEl.insertAdjacentHTML('beforeend', listContent_2);


// 6-е, вставляем созданную группу элементов в HTML документ
// document.body.append(listEl);
// document.body.appendChild(listEl);
// document.body.prepend(listEl);
// C тем же результатом, можно использовать метод "appendChild()".
//! Обрати внимание, что в структуре HTML документа, наша группа элементов вставилась после тега <script>, т.к. был использован для вставки - метод "append()" или метод "appendChild()", которые вставляют - в конец указанного корневого элемента. Если нужно, что-бы вставляемая разметка созданых элементов была вставлена перед тегом <script> или в самом начале тега <body>, следует пользоваться методом "prepend()" или "insertBefore()".


// 4-й вариант решения задачи, с помощью метода "reduce":
// Точно так же как и в предыдущем варианте решения задачи (3-м), создаем переменную-строку с помощью метода "reduce", выполняя 2-й, 3-й и 4-й пункты нашего алгоритма решения задачи.
const listContent_3 = technologies.reduce((acc, technology) => (acc += `<li>${technology}</li>`), "");
// Выводим в лог значение переменной "listContent_3"
console.log('"listContent_3" =>', listContent_3);
console.log('------------------------------------------------');

// Создаем переменную-строку, с записанным в ней с помощью шаблонных строк - тегом-<ul>, внутри которого помещена переменная-строка, с ранее созданой строкой с тегами-<li>. Связывая, таким образом, все созданные нами элементы воедино. Этим действием мы объединяем с собой 1-й и 5-й пункты нашего алгоритма решения задачи.
const list_2 = `<ul>${listContent_3}</ul>`;
// Выводим в лог значение переменной "list_2"
console.log('"list_2" =>', list_2);

// 6-е, вставляем в HTML документ созданные элементы, одновременно с преобразованием содержимого переменной "list_2" из строки, в набор валидных HTML узлов.
document.body.insertAdjacentHTML('beforeend', list_2);


