/*
* Свойства элементов HTML документа
*/ 
// Некоторые атрибуты HTML элементов (тегов) становятся свойствами объектов после их привязки в коде. Например, в разметке HTML документа есть некая картинка (img), если мы ее выделим и "привяжем", то она будет являть собой объект, а ее атрибуты (src, alt и т.п.), будут выступать в качестве свойства этого объекта.

// Выполняем "привязку" картинки к переменной
const imageElement = document.querySelector('.hero__image');

// Выводим в лог ссылку на картинку
console.log('Ссылка на картинку "привязанную" к переменной "imageElement":', imageElement);
console.log('--------------------------------------------');

// Выводим в консоль объект-картинку
console.log('Объект-картинка вызванная через "console.dir":');
console.dir(imageElement);
console.log('--------------------------------------------');

// Выводим в консоль некоторые свойства объекта-картинки
console.log('"src":');
console.log(imageElement.src);
console.log('--------------------------------------------');

console.log('"alt":');
console.log(imageElement.alt);
console.log('********************************************');
// Как можно видеть из результатов вывода в консоль, атрибуты тега "img", являются свойствами объекта "imageElement", а значения соответствующих атрибутов - выступают в качестве значений этих свойств.



/*
* Пример замены свойств объектов-тегов
* изображений
*/

// Выполняем привязку тега-кнопки к переменной "magicBtn" по селектору CSS класса ".js-magic-btn"
const magicBtn = document.querySelector('.js-magic-btn');

// "Вешаем" слушателя на кнопку по переменной "magicBtn" и созадаем стрелочную функцию, внутри которой задаем изменения свойст объекта-картинки 
magicBtn.addEventListener('click', () => {
  // Привязываем изображение к переменной
  const imageEl = document.querySelector('.hero__image');
  
  // Задаем новое значение свойству "src" объекта-изображения
  imageEl.src = 'https://images.pexels.com/photos/1870376/pexels-photo-1870376.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=480';
  // Выводим в консоль новое значение свойства "src", при активации функции (нажатии на кнопку в окне браузера)
  console.log('Новое значение свойства "src" - "imageEl":', imageEl.src);
console.log('--------------------------------------------');

  // Задаем новое значение свойству "alt" объекта-изображения
  imageEl.alt = 'Это новый котик';
  // Выводим в консоль новое значение свойства "alt", при активации функции (нажатии на кнопку в окне браузера)
  console.log('Новое значение свойства "alt" - "imageEl":', imageEl.alt);
console.log('********************************************');
});


/*
* Пример замены свойств объектов текстовых-тегов
* (h1-h6, p, link, span и т.п.)
*/
// У всех объектов-тегов в которых есть текст, есть свойство "textContent". Используя это свойство можно обращаться к текстовому содержанию соответствующих объектов (например, выводить их в лог) и изменять их содержание (заменить один текст на другой).

// "Вешаем" слушателя на кнопку по переменной "magicBtn" и созадаем стрелочную функцию, внутри которой задаем изменения свойст объекта-заголовка с текстом 
magicBtn.addEventListener('click', () => {
  // Привязываем текстовый заголовок к переменной
  const heroTitleEl = document.querySelector('.hero__title');
  // Выводим в лог исходное содержание заголовка, при активации функции (нажатии на кнопку в окне браузера)
  console.log('Начальное значение - "heroTitleEl.textContent" ->', heroTitleEl.textContent);
console.log('--------------------------------------------');
  
  // Задаем новое значение свойству "textContent" объекта-заголовка
  heroTitleEl.textContent = 'Я сладкий пирожочек!';
   // Выводим в лог измененное текстовое содержание заголовка, при активации функции (нажатии на кнопку в окне браузера)
  console.log('Измененное значение - "heroTitleEl.textContent" ->', heroTitleEl.textContent);
console.log('********************************************');
});


/*
 * Атрибуты:
 * - getAttribute(имя-атрибута)
 * - setAttribute(имя-атрибута)
 * - removeAttribute(имя-атрибута)
 * - hasAttribute(имя-атрибута)
 */
// Интерфейс атрибутов тегов - это некий стандартизированный набор свойств и методов предназначеных для работы с любыми атрибутами элементов HTML документа. Данный набор методов является вспомогательным инструментом, который дублирует возможности стандартных операций со свойствами объектов и предназначен для работы с любыми атрибутами тегов. В то время как стандартные операции, позволяют работать только с теми атрибутами тегов, которые преобразовываются в свойства объектов, при их обработке JS кодом (например, после "привязки" тега к переменной).

// "getAttribute(имя-атрибута)" - метод получения значения атрибута.
// Пример использования метода "getAttribute()" для получения значения атрибута "src" картинки, "привязанной" к переменной "imageElement"
console.log(`"imageElement.getAttribute('src')":`, imageElement.getAttribute('src'));
console.log('--------------------------------------------');

// Пример использования стандартной операции работы со свойствами объекта-картинки для получения значения атрибута "src" картинки, "привязанной" к переменной "imageElement"
console.log(`"imageElement.src":`, imageElement.src);
console.log('********************************************');


// "setAttribute(имя-атрибута)" - метод изменения значения атрибута.
// Пример использования метода "setAttribute()" для изменения значения атрибута "src" картинки, "привязанной" к переменной "imageElement". Синтаксис метода - setAttribute('имя атрибута', 'значение атрибута').
// console.log(`"imageElement.setAttribute('src', '')":`, imageElement.setAttribute('src', ''));
// В качестве нового значения атрибута - задаем пустую строку

// Пример использования стандартной операции работы со свойствами объекта-картинки для изменения значения атрибута "src" картинки, "привязанной" к переменной "imageElement"
// console.log(`"imageElement.src = 'новое значение'":`, imageElement.src = '');
// В качестве нового значения атрибута - задаем пустую строку.
// console.log('********************************************');


// "removeAttribute(имя-атрибута)" - метод предназначенный для удаления атрибута.
// Удаляем атрибут "src" у картинки привязанной к переменной "imageElement"
// imageElement.removeAttribute('src');
// console.log('"imageElement.src" ->', imageElement.src);

// Метод "removeAttribute(имя-атрибута)" выполняет операцию полного удаления атрибута вместе с его содержанием (значением) из тега.


// "hasAttribute(имя-атрибута)" - метод предназначенный для проверки наличия атрибута у соответствующего тега-объекта. Он возвращает булевое значение как результат своей работы, "true" - если указанный атрибут есть, и "false" - если его нет.
console.log(`"imageElement.hasAttribute('alt')" ->`, imageElement.hasAttribute('alt'));
console.log('--------------------------------------------');
console.log(`"imageElement.hasAttribute('qwe')" ->`, imageElement.hasAttribute('qwe'));
console.log('********************************************');


/*
 * Data-атрибуты
 */
// "Data-атрибуты" - это не стандартные для HTML "кастомные" пользовательские атрибуты, самостоятельно созданные разработчиком, с помощью которых можно создать атрибут с любым именем и любым значением.
// "Data-атрибуты" используются для дополнения данных в разметку HTML документа, уточнения и расширения функционала определенных элементов.

// Выбираем-привязываем к переменной "actions" все теги <button>, которые находятся внутри элемента с CSS классом ".js-actions".
const actions = document.querySelectorAll('.js-actions button');
// Выводим в консоль выбираные-привязанные к переменной "actions" элементы HTML документа.
console.log(actions);
console.log('--------------------------------------------');

// Выводим в лог первый элемент из списка-массива "actions"
console.log(actions[0]);
console.log('--------------------------------------------');

// Используя "dataset" - выводим в консоль объект с перечнем свойств, которые есть у элемента списка-массива "actions[0]".
// "dataset" - это тип, который вызывает объект с перечнем всех атрибутов, которые относятся к соответствующему объекту.
console.log(actions[0].dataset);
console.log('--------------------------------------------');

// Выводим в лог значения свойства "action" всех элементов списка-массива
console.log('Значения свойства "action", всех элементов списка-массива');
console.log('Первый способ:');
console.log('- "actions[0].dataset.action" ->', actions[0].dataset.action);
console.log('- "actions[1].dataset.action" ->', actions[1].dataset.action);
console.log('- "actions[2].dataset.action" ->', actions[2].dataset.action);
console.log('--------------------------------------------');

// Второй способ вывода в лог значений атрибутов элементов из списка-массива, с использование метода "getAttribute()"
console.log('Второй способ:');
console.log(`- "actions[0].getAttribute('data-action')" ->`, actions[0].getAttribute('data-action'));
console.log(`- "actions[1].getAttribute('data-action')" ->`, actions[1].getAttribute('data-action'));
console.log(`- "actions[2].getAttribute('data-action')" ->`, actions[2].getAttribute('data-action'));

