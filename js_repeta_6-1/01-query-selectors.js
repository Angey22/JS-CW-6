/*
 * document.querySelector(selector) и document.querySelectorAll(selector)
 *   selector - любой валидный CSS-селектор
 *
 * Что возвращают?
 */
// При запуске кода в браузере есть доступ к 2-м главным объектам. Первым и самым главным из которых является глобальный объект "window", который хранит в себе практически все свойства браузера. Например, именно в объекте "window" расположены глобальные методы: "console", "alert", "promt" и многие другие.

// Выводим в лог глобальный объект "window"
console.log(window);
console.log('--------------------------------------------');

// Вторым по важности объектом является - "document", который содержит в себе весь "DOM" и все объекты необходимые для работы с ним.

// Выводим в лог глобальный объект "document"
console.log(document);
console.log('--------------------------------------------');
// Необходимо обратить внимание на то, что при использовании команд "console.log(document)" - в лог выводится HTML структура документа (со всеми тегами и кодом подклюсенного к соответствующей странице JS скрипта).

// Выводим в консоль глобальный объект "document" через "dir"
console.dir(document);
console.log('--------------------------------------------');
// При выводе в консоль объекта "document" через "dir" - отображается его структура как объекта, с набором соответствующих свойств и методов находящихся в нем.

// Таким образом, объект "window" - описывает и содержит в себе все свойства и методы окна, а объект "document" - все свойства и методы HTML документа.


//!=========================================================
// Выводим в лог все свойства браузера
console.log(Object.keys(window));
console.log('********************************************');
// Все свойства браузера содержат в себе как DOM так и BOM
//!=========================================================

// Для обращения к какому-либо елементу HTML документа из JS кода необходимо задействовать (использавать) соответствующий метод объекта "document". Например, для обращения к тегу списка <ul> (который есть в разметке документа) нужно используя CSS селектор (можно и любой другой селектор использовать (селектор тега, атрибута, id), главное что бы он был связан с соответствующим элементом документа), через метод "querySelector()" объекта "document" связать его с переменной или любым другим способом с соответствующим кодом скрипта.

// Связываем переменную "navEl" с тегом <ul>, используя метод "querySelector()" объекта "document" и селектор <ul>
const navEl = document.querySelector('ul');
// Выводим в лог значение переменной "navEl" в виде ссылки на соответствующий тег
console.log('"navEl" ->', navEl);
// Выводим в консоль объект с набором свойств и методов
console.dir(navEl);
console.log('--------------------------------------------');

// Важной особенностью метода "querySelector()" является то, что он ищет только ОДИН элемент, который соответствует требованиям (соответствует использованому селектору). Например, есть некий список (<ul>) в котором размещены пункты (<li>), и нам нужно найти и привязать к коду один из пунктов этого списка. Используя код "document.querySelector('li')" - мы найдем и привяжем первый попавшийся тег <li>, а все остальные подобные элементы - будут проигнорированы.
// Таким образом, метод "querySelector()" используется для поиска ТОЛЬКО одного уникального элемента.

// В случаях, когда необходимо найти и "привязать" группу элементов с определенным селектором, нужно использовать метод "querySelectorAll()". Который, выделяет все элементы по соответствующему селектору и возвращает найденную группу элементов в виде списка, похожего по своим свойствам на массив.

// Используя метод "querySelector()" - находм первый "попавшийся" элемент HTML документа с селектором тега "li"
const navLinkEl = document.querySelector('li');
// Выводим в лог переменную "navLinkEl"
console.log("navLinkEl ->", navLinkEl);

// Если заданый элемен - НЕ будет найден, тогда метод "querySelector()" вернет "null"
const navLinkEl2 = document.querySelector('qwe');
console.log("navLinkEl2 ->", navLinkEl2);
console.log('--------------------------------------------');


// Используя метод "querySelectorAll()" - находм все элемент HTML документа с селектором тега "li"
const navLinksEl = document.querySelectorAll('li');
// Выводим в лог переменную "navLinkEl"
console.log("navLinskEl ->", navLinksEl);

// Если заданые для поиска элементы - НЕ будут найдены, тогда метод "querySelectorAll()" вернет пустой список, похожий на пустой массив.
const navLinksEl2 = document.querySelectorAll('qwe');
console.log("navLinskEl2 ->", navLinksEl2);
console.log('********************************************');



/*
 * Document.querySelector* и Element.querySelector*
 */
// При использовании методов "querySelector()" и "querySelectorAll()" можно использовать как ссылку на объект "document" в начале кода-обращения к соответствующему методу ("document.querySelectorAll('qwe')"), так и переменную к которой ранее уже была "привязана" в коде группа элементов ("navLinksEl.querySelectorAll('qwe')"). При этом, поиск соответствующих элементов HTML документа, будет производится только внутри указанной группы.




/*
* Пример практического использования методов 
* "querySelector()" и "querySelectorAll()"
*/

// Создаем переменную "magicBtn" и "привязываем" ее с помощью метода "querySelector()" к кнопке с CSS селектором класса "js-magic-btn".
const magicBtn = document.querySelector('.js-magic-btn');

// "Вешаем", с помощью метода "addEventListener()" слушателя на соответствующую кнопку, и внутри этого метода создаем стрелочную функцию, которая должна срабатывать при нажатии на эту кнопку - выводя в лог некий текст.
magicBtn.addEventListener('click', () => {
    console.log('Делаем магию по нажатию кнопки;)');
});

// Важной особенность выполнения этого и любого другого подобного кода является то, что он выполняется только после того, как браузер выполнит операцию построения DOM дерева.


