/*
 * События.
 * - Создание и удаление слушателей
 * - Именование колбеков для слушателей
 *    - handle*: handleSubjectEvent
 *    - *Handler: subjectEventHandler
 *    - on*: onSubjectEvent
 * - Ссылочная идентичность колбеков
 * - Объект события
 */
// События - это реакция браузера на какоето действие пользователя (например: дрег мышки, нажатие клавишимышки, скролл мышки, нажатие клавиш на клавиатуре и т.п.) и/или реакция браузера на какое-либо состояние элементов на странице (например: начало и конец действия анимации и т.п.). Любое событие - фиксируется, и отталкиваясь от него, можна активировать выполнение нужного кода (фрагмента скрипта).


// ! Метод "addEventListener('событие', function)" - предназначен для регистрации событий объекта - "element", происходящих в окне браузера. Синтаксис метода - "element.addEventListener('событие', function)":
// ! - "element" - переменная-ссылка на элемент в HTML документе, изменения состояния которого подлежат регистрации (прослушиванию);
// ! - 'событие' - служебный текстовый литерал, описывающий тип обрабатываемого события;
// ! - "function" - функция, которая активируется при регистрации соответствующего события.

// ! Метод "removeEventListener('событие', function)" - для снятия (отключения) регистратора событий объекта - "element", происходящих в окне браузера. Синтаксис метода такой же, как и у метода "addEventListener('событие', function)".


// Пример 1 (по HTML разметке)
// Пример простейшего использования функции "addEventListener()" - фиксации или "слушателя" событий для выполнения какой-то операции (активации фрагмента кода), при возникновен соответствующего события:
// - 1-е, создаем переменную-ссылку на существующую в разметке HTML документа кнопку - "Целевая кнопка" с CSS классом "js-target-btn".
const targetBtn_1 = document.querySelector('.js-target-btn-1');

// - 2-е, "вешаем" слушателя на тег-кнопку посредством "targetBtn_1", и одновременно с этим, создаем функцию, которая активируется при возникновении отслеживаемого события.
targetBtn_1.addEventListener('click', () => { 
  // Выводим в консоль сообщение при активации функции, т.е. при "нажатии" соответствующей кнопки в окне браузера.
  console.log('- раза, была "нажата" кнопка "Целевая кнопка"');
});
// ! В вышеописанном примере используется "ананимная" стрелочная функция, тело которой вписано как аргумент метода "addEventListener()". Такой подход допустимый, только в тех случаях, когда соответствующая функция имеет минимальное количество строк кода (маленькая). В остальных случаях, в качестве второго аргумента метода "addEventListener()" подставляется - "переменная-ссылка" на соответствующую внешнюю функцию, котороя используется как "колл-бек" функция метода "слушателя событий". При создании подобных "переменных-ссылок" на внешюю "колл-бек" функцию метода "слушателя событий", необходимо жестко придерживаться правил именования соответствующих функций, согластно с требованиями "Конвенции именования" для них.


// Конвенция именования (правила именования) внешних "колл-бек" функция метода "слушателя событий", основывается на использовании 3-х способов (патернов) именования - "hendler" (в переводе с англ. - "обработчиков событий"):

// 1-й, основан на использовании в имени словосочетания - "hendle(тип отслеживаемого события)" или "hendle(где происходит событие)(тип отслеживаемого события)". Например, "hendleClick" (в переводе с англ. - "обработчик события - клика") или "hendleTargetButtonClick"  (в переводе с англ. - "обработчик события - клика на целевую кнопку").

// 2-й, основан на использовании в имени словосочетания - "(тип отслеживаемого события)Handler" или "(где происходит событие)(тип отслеживаемого события)Handler". Например, "clickHandler" (в переводе с англ. - "клик - обработчик событий") или "targetButtonClickHandler" (в переводе с англ. - "целевая кнопка - клик - обработчик событий").

// 3-й, основан на использовании в имени словосочетания - "on(тип отслеживаемого события)" или "on(где происходит событие)(тип отслеживаемого события)". Например, "onClick" (в переводе с англ. - "при - клике") или "onTargetButtonClick" (в переводе с англ. - "при - целнвая кнопка - клике").

// ! Важной особенностью использования вышеописанных правил является то, что в проекте - должно быть использовано только одно из этих правил. НЕ допустипо использовать в одном проекте несколько правил, так как при этом будет отсутствовать однородность (однотипность) кода, что значительно усложнит его чтение и обработку.


//!============================================================

// Пример 2 (по HTML разметке)
// Создаем переменные-ссылки на существующую в разметке HTML документа кнопки - привязываясь к ним по их CSS классам.
// "Целевая кнопка" (тег-button)
const targetBtn = document.querySelector('.js-target-btn');
// "Добавить слушателя" (тег-button)
const addListenerBtn = document.querySelector('.js-add-listener');
// "Снять слушателя" (тег-button)
const removeListenerBtn = document.querySelector('.js-remove-listener');


// ! При регистрации любого события в метод "addEventListener()" приходит от браузера служеюный объект - "event", в котором описывается свойства соответствующего события (см. лог при клике на кнопки - "PointerEvent").


// Вешаем слушателя на кнопку "Добавить слушатель"
addListenerBtn.addEventListener('click', event => {
  // Выводим в лог служебный объект "event", при нажатии на кнопку "Добавить слушатель"
  console.log(event);
  // Выводим в лог текст, при нажатии на кнопку "Добавить слушатель"
  console.log('Вешаю слушателя события на целевую кнопку');

  // Вешаем слушатель на кнопку - "Целевая кнопка"
  targetBtn.addEventListener('click', onTargetBtnClick);
});

// Вешаем слушателя на кнопку "Снять слушатель"
removeListenerBtn.addEventListener('click', event => {
  // Выводим в лог служебный объект "event", при нажатии на кнопку "Снять слушатель"
  console.log(event);
  // Выводим в лог текст, при нажатии на кнопку "Снять слушатель"
  console.log('Снимаю слушателя события с целевой кнопки');

  // Снимаем слушатель с кнопки - "Целевая кнопка"
  targetBtn.removeEventListener('click', onTargetBtnClick);
});

// Создаем внешнюю "колл-бек" функцию
function onTargetBtnClick(event) {
  // Выводим в лог служебный объект "event", при нажатии на кнопку "Целевая кнопка"
  console.log(event);
  // Выводим в лог текст, при нажатии на кнопку "Целевая кнопка"
  console.log('Клик по целевой кнопке');
};